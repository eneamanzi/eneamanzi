name: Metrics
on:
  # Schedule daily updates
  schedule: [{cron: "0 0 * * *"}]
  # (optional) Run workflow manually
  workflow_dispatch:
  # (optional) Run workflow when pushing on master/main
  push: {branches: ["master", "main"]}
jobs:
  github-metrics:
    runs-on: ubuntu-latest
    environment: 
      name: production
    permissions:
      contents: write
    steps:
      # --- 1. Statistiche Base (per "users accounts") ---
      # Genera il file: base.svg
      - name: Generate Base Stats
        uses: lowlighter/metrics@latest
        with:
          filename: base.svg
          token: ${{ secrets.METRICS_TOKEN }}
          config_timezone: Europe/Rome
          # Plugin abilitati: solo "base" (che √® quello di default)
          base: header, activity, community,  repositories, metadata # Puoi personalizzare quali sezioni base mostrare
          repositories_skipped: Esercizi-Asmeta

      ## --- 2. Achievements ---
      ## Genera il file: achievements.svg
      #- name: Generate Achievements
      #  uses: lowlighter/metrics@latest
      #  with:
      #    filename: achievements.svg
      #    token: ${{ secrets.METRICS_TOKEN }}
      #    config_timezone: Europe/Rome
      #    base: ""  # Nascondiamo le statistiche base in questo file
      #    plugin_achievements: yes
      #    plugin_achievements_display: compact
          

      # --- 3. Top Languages ---
      # Genera il file: languages.svg
      - name: Generate Top Languages
        uses: lowlighter/metrics@latest
        with:
          filename: languages.svg
          token: ${{ secrets.METRICS_TOKEN }}
          config_timezone: Europe/Rome
          base: ""
          plugin_languages: yes
          plugin_languages_limit: 8
          # Aggiungi qui le repo da ignorare, se vuoi
          repositories_skipped: Esercizi-Asmeta
  
  # ----- JOB 2: GITHUB-SKYLINE (Aggiungi questo) -----
  github-skyline:
    runs-on: ubuntu-latest
    
    # Questa riga √® FONDAMENTALE: 
    # Dice ad Actions di aspettare che il job "github-metrics" finisca
    # prima di iniziare questo. Evita conflitti di scrittura!
    needs: github-metrics
    
    # Diamo anche a questo job il permesso di scrivere sul repository
    permissions:
      contents: write 
      
    steps:
      # 1. Fa il checkout del codice, altrimenti non sa dove salvare il file
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Installa l'estensione gh-skyline
      # (Il 'gh' CLI √® gi√† installato nei runner di GitHub)
      - name: Install gh-skyline extension
        run: gh extension install github/gh-skyline
        env:
          # Usa il token standard di GitHub Actions per autenticarsi
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 3. Genera il file STL
      - name: Generate STL file
        run: |
          # ‚¨áÔ∏è MODIFICA QUI IL TUO USERNAME ‚¨áÔ∏è
          USER="eneamanzi"
          
          echo "Generando lo skyline per $USER..."
          # Genera il file .stl nominandolo (es.) TUO-USERNAME-QUI-skyline.stl
          gh skyline --user $USER --output "${USER}-skyline.stl"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. Fa il commit automatico del file .stl nel repository
      # Useremo un'azione semplice che fa tutto da sola
      - name: Commit and push STL file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'ü§ñ CI: Aggiorna file GitHub Skyline'
          # Specifica che deve committare SOLO i file .stl
          file_pattern: '*.stl' 
          # Imposta l'autore del commit come "Bot"
          commit_user_name: 'GitHub Actions Bot'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'